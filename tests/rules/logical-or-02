/*
 *   PART LIBRARY
 */
Property prop1(txt);
Property repress(txt); 
Property name(txt); 
Property strength(num);

PartType Promoter(name, strength);
PartType Repressor(name, strength, repress);


Promoter p0(.name("p0"), .strength(0));
Promoter p1(.name("p1"), .strength(1));
Promoter p2(.name("p2"), .strength(2));
Promoter p3(.name("p3"), .strength(3));
Promoter p4(.name("p4"), .strength(4));
Promoter p5(.name("p5"), .strength(5));
Promoter p6(.name("p6"), .strength(6));
Promoter p7(.name("p7"), .strength(7));
Promoter p8(.name("p8"), .strength(8));
Promoter p9(.name("p9"), .strength(9));

Repressor r0(.repress("p0"), .strength(0));
Repressor r1(.repress("p1"), .strength(1));
Repressor r2(.repress("p2"), .strength(2));
Repressor r3(.repress("p3"), .strength(3));
Repressor r4(.repress("p4"), .strength(4));
Repressor r5(.repress("p5"), .strength(5));
Repressor r6(.repress("p6"), .strength(6));
Repressor r7(.repress("p7"), .strength(7));
Repressor r8(.repress("p8"), .strength(8));
Repressor r9(.repress("p9"), .strength(9));

/*
 *   LOGICAL OR
 */
 
// VALID ORs 
Rule val_r02(contains p0 \/ contains p1); 
Rule val_r03(contains p0 \/ contains p1 \/ contains p2); 
Rule val_r01(Repressor.repress == "p0" \/ Promoter.name == "p0"); 
Rule val_r04(Repressor.repress == "p0" \/ Promoter.name == "p0" \/ Repressor.repress == Promoter.name);

// negations
Rule val_r05(not contains p0 \/ not contains p1); 
Rule val_r06(contains p0 \/ not contains p1); 
Rule val_r07(not contains p0 \/ contains p1); 
Rule val_r08(contains p0 \/ contains p1); 

Rule val_r09(not contains p0 \/ not contains p1 \/ not contains p2); 
Rule val_r10(not contains p0 \/ not contains p1 \/ contains p2); 
Rule val_r11(not contains p0 \/ contains p1 \/ not contains p2); 
Rule val_r12(not contains p0 \/ contains p1 \/ contains p2); 

Rule val_r13(contains p0 \/ not contains p1 \/ not contains p2); 
Rule val_r14(contains p0 \/ not contains p1 \/ contains p2); 
Rule val_r15(contains p0 \/ contains p1 \/ not contains p2); 
Rule val_r16(contains p0 \/ contains p1 \/ contains p2); 


// INVALID ORs 
// just uncomment them

// 1 Arrangement + 1 Expression
//Rule inv_r01(Repressor.repress == "p0" \/ contains Promoter); 
//Rule inv_r02(contains Promoter \/ Repressor.repress == "p0"); 

// 2 Arrangements + 1 Expression
//Rule inv_r03(contains Promoter \/ Repressor.repress == "p0" \/ contains Repressor); 
//Rule inv_r04(Repressor.repress == "p0" \/ contains Promoter \/ contains Repressor); 
//Rule inv_r05(Repressor.repress == "p0" \/ contains Repressor \/ contains Promoter); 

// 1 Arrangement + 2 Expressions
//Rule inv_r06(Repressor.repress == "p0" \/ Promoter.name == "p0" \/ contains Promoter); 
//Rule inv_r07(Repressor.repress == "p0" \/ contains Promoter \/ Promoter.name == "p0"); 
//Rule inv_r08(contains Promoter \/ Repressor.repress == "p0" \/ Promoter.name == "p0"); 

// Negations
//Rule inv_r09(notcontains Promoter \/ Repressor.repress != "p0" \/ contains Repressor); 
//Rule inv_r10(Repressor.repress != "p0" \/ notcontains Promoter \/ contains Repressor); 
//Rule inv_r11(Repressor.repress != "p0" \/ contains Repressor \/ notcontains Promoter); 
