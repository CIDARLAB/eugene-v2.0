
/***** REAL USE-CASE: ***/

SBOL.import("./designs/cidar/cello/xor/import_cello_XOR.sbol.xml");

Device xor_template( [input_pTac__input_pTet__AmtR_ |
                      input_pTet__pAmtRjs__LitR_ |
                      input_pTac__pAmtRjs__PhlF_ |
                      pPhlF__pLitRjs__output_YFP_ ],

                      [input_pTac__input_pTet__AmtR_ |
                       input_pTet__pAmtRjs__LitR_ |
                       input_pTac__pAmtRjs__PhlF_ |
                       pPhlF__pLitRjs__output_YFP_ ],

                       [input_pTac__input_pTet__AmtR_ |
                        input_pTet__pAmtRjs__LitR_ |
                        input_pTac__pAmtRjs__PhlF_ |
                        pPhlF__pLitRjs__output_YFP_ ],

                       [input_pTac__input_pTet__AmtR_ |
                        input_pTet__pAmtRjs__LitR_ |
                        input_pTac__pAmtRjs__PhlF_ |
                        pPhlF__pLitRjs__output_YFP_ ]);


Rule output_last( ON xor_template : 
	ENDSWITH pPhlF__pLitRjs__output_YFP_ 
AND 
	ALTERNATE_ORIENTATION
AND
	input_pTac__input_pTet__AmtR_ EXACTLY 1
AND
	input_pTet__pAmtRjs__LitR_ EXACTLY 1
AND
	input_pTac__pAmtRjs__PhlF_ EXACTLY 1
AND
	pPhlF__pLitRjs__output_YFP_ EXACTLY 1);

designs = product( xor_template );
println( "number of designs:", sizeof(designs) );

for(num i=0; i<SIZEOF(designs); i=i+1) {
	println( designs[i] );
}

SBOL.export( designs, "./designs/cidar/cello/xor/export_cello_XOR.sbol.xml" );
